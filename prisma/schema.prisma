generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Client {
    id                      String          @id @default(auto()) @map("_id") @db.ObjectId
    name                    String
    email                   String          @unique
    password                String
    phone                   String?
    address                 String?
    bankAccount             String? // Conta bancária para recebimentos
    role                    Role            @default(PRODUCER)
    // Two-factor authentication fields
    twoFactorEnabled        Boolean         @default(false)
    twoFactorSecret         String?
    // Notification preferences as JSON field
    notificationPreferences Json?
    products                Product[]
    sales                   Sale[]          @relation("Sales")
    purchases               Sale[]          @relation("Purchases")
    affiliations            Sale[]          @relation("Affiliations")
    withdrawals             Withdrawal[]
    createdAt               DateTime        @default(now())
    updatedAt               DateTime        @updatedAt
    Affiliate               Affiliate[]
    Coproducer              Coproducer[]
    Notification            Notification[]
    SupportTicket           SupportTicket[]
}

enum Role {
    PRODUCER
    COPRODUCER // Parceiro de negócios
    ADMIN
    AFFILIATE
}

model Product {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    category    String
    description String?
    type        ProductType
    price       String?
    mediaUrl    String? // Vídeos ou imagens
    fileUrl     String? // Link para infoproduto digital
    status      ProductStatus @default(ACTIVE)
    clientId    String
    client      Client        @relation(fields: [clientId], references: [id])
    sales       Sale[]
    affiliates  Affiliate[]
    coproducers Coproducer[]
    affiliable  Boolean       @default(false)
    commission  String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

enum ProductType {
    DIGITAL
    FISICO
    SERVICO
    PAGAMENTO
}

enum ProductStatus {
    ACTIVE
    INACTIVE
}

model Sale {
    id            String     @id @default(auto()) @map("_id") @db.ObjectId
    amount        Float
    netAmount     Float
    status        SaleStatus @default(PENDING)
    productId     String
    product       Product    @relation(fields: [productId], references: [id])
    buyerId       String
    buyer         Client     @relation("Purchases", fields: [buyerId], references: [id])
    sellerId      String
    seller        Client     @relation("Sales", fields: [sellerId], references: [id])
    affiliateId   String?
    affiliate     Client?    @relation("Affiliations", fields: [affiliateId], references: [id])
    commission    Float?     @default(0)
    serviceFee    Float
    paymentMethod String?
    transactionId String?    @unique
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    Payment       Payment?

    @@index([productId])
    @@index([buyerId])
    @@index([sellerId])
    @@index([affiliateId])
}

enum SaleStatus {
    PENDING
    PAID
    CANCELED
    REFUNDED
    CHARGEBACK
}

model Withdrawal {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    amount          Float
    status          WithdrawalStatus @default(PENDING)
    clientId        String
    client          Client           @relation(fields: [clientId], references: [id])
    createdAt       DateTime         @default(now())
    processedAt     DateTime?        @updatedAt
    rejectionReason String?
    fees            Float            @default(0)

    @@index([clientId])
}

enum WithdrawalStatus {
    PENDING
    PROCESSED
    REJECTED
}

model Payment {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    saleId        String        @unique
    sale          Sale          @relation(fields: [saleId], references: [id])
    method        PaymentMethod
    transactionId String? // ID da transação do gateway de pagamento
    status        PaymentStatus @default(PENDING)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

enum PaymentMethod {
    CREDIT_CARD
    PAYPAL
    BANK_TRANSFER
    CRYPTO
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
}

model Affiliate {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    clientId  String
    client    Client          @relation(fields: [clientId], references: [id])
    productId String
    product   Product         @relation(fields: [productId], references: [id])
    status    AffiliateStatus @default(PENDING)
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
}

enum AffiliateStatus {
    PENDING
    APPROVED
    REJECTED
}

model Coproducer {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    clientId     String
    client       Client   @relation(fields: [clientId], references: [id])
    productId    String
    product      Product  @relation(fields: [productId], references: [id])
    revenueShare Float // Percentual da receita compartilhada
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Notification {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    clientId  String
    client    Client           @relation(fields: [clientId], references: [id])
    message   String
    type      NotificationType
    read      Boolean          @default(false)
    createdAt DateTime         @default(now())
}

enum NotificationType {
    SALE
    PAYMENT
    AFFILIATE
    SYSTEM
}

model SupportTicket {
    id        String       @id @default(auto()) @map("_id") @db.ObjectId
    clientId  String
    client    Client       @relation(fields: [clientId], references: [id])
    subject   String
    message   String
    status    TicketStatus @default(OPEN)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

enum TicketStatus {
    OPEN
    IN_PROGRESS
    CLOSED
}

model UsedToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String   @unique
    userId    String
    createdAt DateTime @default(now())
    expiresAt DateTime
}
